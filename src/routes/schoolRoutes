const express = require("express");
const bcrypt = require("bcryptjs");
const asyncHandler = require("express-async-handler");

const ChunkedUpload = require("@rstcruzo/express-chunked-file-upload");

const { School, schoolSchema } = require("../models/schoolModel");
const createToken = require("../config/jwt");
const { protect } = require("../middlewares/authMiddleware");
const { checkEmail, checkInputs } = require("../helpers");
const { default: axios } = require("axios");

const router = express.Router();

//------- GET REQUESTS -------//

// GET Single School
// PATH /api/schools/info
// PRIVATE
router.get(
  "/info",
  protect,
  asyncHandler(async (req, res) => {
    if (!req.schoolId) {
      res.status(401);

      throw new Error("User not authorized");
    }
    try {
      const schoolInfo = await School.findById(req.schoolId).select(
        "-password"
      );
      const data = { ...schoolInfo };
      res.status(200).json(data["_doc"]);
    } catch (error) {
      res.status(400);

      throw new Error("Error fetching data");
    }
  })
);

//  GET Single School Posts
// PATH /api/schools/posts
// PRIVATE
router.get(
  "/posts",
  protect,
  asyncHandler(async (req, res) => {
    const { page: pageNumber, query, sort } = req.query;

    let totalArticles, totalPages, nextPage, previousPage, results;

    const sortArticles = (array) => {
      if (sort.trim() === "Date(desc)") {
        return array;
      }

      if (sort.trim() === "Date(asc)") {
        return array.sort(
          (a, b) =>
            new Date(a.articleDetails.timeStamp).getTime() -
            new Date(b.articleDetails.timeStamp).getTime()
        );
      }

      if (sort.trim() === "Title(desc)") {
        return array.sort((a, b) =>
          a.articleDetails.title > b.articleDetails.title ? -1 : 1
        );
      }
      if (sort.trim() === "Title(asc)") {
        return array.sort((a, b) =>
          a.articleDetails.title > b.articleDetails.title ? 1 : -1
        );
      }
    };

    if (!req.schoolId) {
      res.status(401);

      throw new Error("User not authorized");
    }
    try {
      const schoolInfo = await School.findById(req.schoolId)
        .select("-password")
        .lean();

      if (!schoolInfo.articles) {
        res.status(200).json({
          results: [],
          email: schoolInfo.email,
          backdrop_image: schoolInfo.backdrop_image,
          avatar_image: schoolInfo.avatar_image,
        });
      }

      const sortedArticles = sortArticles(schoolInfo.articles);

      totalArticles = sortedArticles.length;
      totalPages = Math.ceil(
        sortedArticles.length / schoolInfo.settings.paginationResults
      );
      nextPage = pageNumber + 1 <= totalPages ? pageNumber : null;
      previousPage = pageNumber - 1 < 1 ? null : pageNumber - 1;
      results = [];

      if (!query) {
        for (
          i =
            pageNumber < 2
              ? 0
              : (pageNumber - 1) * schoolInfo.settings.paginationResults;
          i < pageNumber * schoolInfo.settings.paginationResults;
          i++
        ) {
          if (!sortedArticles[i]) break;
          results.push(schoolInfo.articles[i]);
        }
      }
      if (query) {
        const regExp = new RegExp(query, "gi");

        let stringsArr = sortedArticles.map(
          (article) => article.articleDetails
        );
        stringsArr.forEach((art, i, arr) => {
          arr[i] = Object.values(art)
            .filter((str) => !str.startsWith("https://firebasestorage"))
            .join("");
        });

        const matchedResults = stringsArr.filter((str) => str.match(regExp));

        for (
          i =
            pageNumber < 2
              ? 0
              : (pageNumber - 1) * schoolInfo.settings.paginationResults;
          i < pageNumber * schoolInfo.settings.paginationResults;
          i++
        ) {
          if (!stringsArr[i]) break;
          stringsArr[i].match(regExp) && results.push(sortedArticles[i]);
        }

        totalArticles = matchedResults.length;
        totalPages = Math.ceil(
          matchedResults.length / schoolInfo.settings.paginationResults
        );
        nextPage = pageNumber + 1 <= totalPages ? pageNumber : null;
        previousPage = pageNumber - 1 < 1 ? null : pageNumber - 1;
      }

      const data = {
        name: schoolInfo.name,
        email: schoolInfo.email,
        backdrop_image: schoolInfo.backdrop_image,
        avatar_image: schoolInfo.avatar_image,
        posts: {
          results,
          nextPage,
          previousPage,
          totalArticles,
          totalPages,
          query,
          sort,
        },
        settings: schoolInfo.settings,
      };

      res.status(200).json(data);
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

// GET Single School
// PATH /api/schools/info
// PRIVATE
router.get(
  "/settings",
  protect,
  asyncHandler(async (req, res) => {
    if (!req.schoolId) {
      res.status(401);

      throw new Error("User not authorized");
    }
    try {
      const schoolInfo = await School.findById(req.schoolId).lean();
      const { settings } = schoolInfo;
      res.status(200).json({ message: "success", data: settings });
    } catch (error) {
      res.status(400);

      throw new Error("Can't update settings!");
    }
  })
);

// GET Single School Students
// PATH /api/schools/:id/students
// PRIVATE
router.get(
  "/:id/students",
  protect,
  asyncHandler(async (req, res) => {
    let school;
    const schoolId = req.params.id;

    try {
      school = await School.findById(schoolId);

      if (!school) {
        res.status(400);

        throw new Error("Oops, We encountered an error!!!");
      }

      res.status(200).json({ students: school.students });
    } catch (error) {
      res.status(400);

      throw new Error("Oops, We encountered an error!!!");
    }
  })
);
// GET Single School Schedules
// PATH /api/schools/:schoolId/schedules
// PRIVATE
router.get(
  "/:schoolId/schedules",
  protect,
  asyncHandler(async (req, res) => {
    let school;
    const schoolId = req.params.schoolId;

    try {
      school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);

        throw new Error("Oops, School not found!!!");
      }

      const schoolSchedules = school.schedules;

      if (!schoolSchedules) {
        res.status(400);

        throw new Error("Oops, No schedules were found");
      }

      res.status(200).json({ data: schoolSchedules });
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

// GET Single School Article
// PATH /api/schools/:schoolId/:articleId
// PRIVATE
router.get(
  "/:schoolId/articles/:articleId",
  protect,
  asyncHandler(async (req, res) => {
    let school;
    const { schoolId, articleId } = req.params;

    try {
      school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);

        throw new Error("Oops, School not found!!!");
      }

      const schoolArticles = school.articles;

      if (!schoolArticles) {
        res.status(400);

        throw new Error("Oops, No articles were found");
      }

      const articleLocation = schoolArticles.filter(
        (a) => a.articleId === articleId
      )[0]["articleURL"];

      if (!articleLocation) {
        res.status(404);

        throw new Error("Oops, article not found");
      }

      try {
        const articleBlob = await axios({
          url: articleLocation,
          method: "GET",
        });
        const article = await articleBlob.data;

        if (articleBlob.status !== 200 && articleBlob.statusCode !== "OK") {
          res.status(404);

          throw new Error("Article not found");
        }
        res.status(200).json({ article });
      } catch (error) {
        res.status(400);
        throw new Error(error);
      }
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);
// GET Single School Article
// PATH /api/schools/:schoolId/edit/:articleId
// PRIVATE
router.get(
  "/:schoolId/articles/edit/:articleId",
  protect,
  asyncHandler(async (req, res) => {
    let school;
    const { schoolId, articleId } = req.params;

    try {
      school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);

        throw new Error("Oops, School not found!!!");
      }

      const schoolArticles = school.articles;

      if (!schoolArticles) {
        res.status(400);

        throw new Error("Oops, No articles were found");
      }

      const articleDetails = schoolArticles.filter(
        (a) => a.articleId === articleId
      )[0].articleDetails;
      const articleLocation = schoolArticles.filter(
        (a) => a.articleId === articleId
      )[0]["articleURL"];

      if (!articleLocation) {
        res.status(404);

        throw new Error("Oops, article not found");
      }

      try {
        const articleBlob = await axios({
          url: articleLocation,
          method: "GET",
        });
        const article = await articleBlob.data;

        if (articleBlob.status !== 200 && articleBlob.statusCode !== "OK") {
          res.status(404);

          throw new Error("Article not found");
        }
        res.status(200).json({ article, articleDetails });
      } catch (error) {
        res.status(400);
        throw new Error(error);
      }
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

//------- PUT REQUESTS -------//

// PUT Change School Password
// PATH /api/schools/change-password
// PRIVATE
router.put(
  "/change-password/:id",
  protect,
  asyncHandler(async (req, res) => {
    const { changePassword, newPassword } = req.body;
    const schoolId = req.schoolId;

    if (newPassword) {
      const salt = await bcrypt.genSalt();
      const password = await bcrypt.hash(newPassword, salt);
      const passwordUpdate = {
        password,
      };

      try {
        const school = await School.findByIdAndUpdate(schoolId, passwordUpdate);
        if (!school) {
          res.status(400);
          throw new Error("Error changing password.");
        }
        return res.status(200).json({ passwordChange: true });
      } catch (error) {
        res.status(400);

        throw new Error("Could not change password at the moment.");
      }
    }

    try {
      const school = await School.findById(schoolId);
      const { password } = school;

      const isCorrectPassword = await bcrypt.compare(changePassword, password);

      if (!isCorrectPassword)
        return res
          .status(200)
          .json({ message: "Incorrect password", isSuccess: false });

      return res
        .status(200)
        .json({ message: "Valid password", isSuccess: true });
    } catch (error) {
      res.status(400);

      throw new Error("Server Error");
    }
  })
);

// PUT Single School Details
// PATH /api/schools/:schoolId
// PRIVATE
router.put(
  "/:schoolId",
  protect,
  asyncHandler(async (req, res) => {
    let school;
    const update = req.body;
    const { schoolId } = req.params;

    try {
      school = await School.findByIdAndUpdate(schoolId, update);
      res.status(200).json(school);
    } catch (error) {
      res.status(400);
      throw new Error(
        "Sorry, we couldn't process your changes at this moment. Please try again later."
      );
    }
  })
);

// PUT Update School Document
// PATH /api/schools/:schoolId/update
// PRIVATE
router.put(
  "/:schoolId/update",
  protect,
  asyncHandler(async (req, res) => {
    // if templates is undefined, add new templates field to School Schema and create templates field in already existing document.
    try {
      const school = await School.findById(req.schoolId).lean();

      if (!school.templates) {
        schoolSchema.add({ templates: Object });
        const response = await School.updateOne(
          { _id: req.schoolId },
          {
            $set: {
              templates: { [req.body.templateName]: req.body.templateData },
            },
          },
          { new: true, upsert: true }
        );
        return res.status(200).json({ message: "successful", response });
      }

      // if templates exists, create template update object with pending template and set it to already existing document.
      const templatesUpdate = {
        ...school.templates,
        [req.body.templateName]: req.body.templateData,
      };
      schoolSchema.add({ templates: Object });
      const response = await School.updateOne(
        { _id: req.schoolId },
        {
          $set: {
            templates: {
              ...templatesUpdate,
            },
          },
        }
      );
      return res.status(200).json({
        message: "successful",
        response,
      });
    } catch (error) {
      res.status(400);
      throw new Error(
        "Sorry could not create template at this mmoment , please try again later."
      );
    }
  })
);

// PUT Update Student Data
// PATH api/students/:schoolId/students/update
// PRIVATE
router.put(
  "/:schoolId/students/update",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const { type, data } = req.body;

    if (schoolId !== req.schoolId) {
      res.status(401);
      throw new Error("Not authorized to access this page");
    }

    const school = await School.findById(schoolId);

    if (!school) {
      res.status(400);
      throw new Error("School not found");
    }

    const studentsUpdate = school.students;

    if (type === "save") {
      studentsUpdate.forEach((student, index, arr) => {
        if (student.student_id === data.student_id) {
          arr[index] = data;
        }
        return;
      });
    }

    if (type === "delete") {
      let index;

      data.forEach((student) => {
        studentsUpdate.forEach((person, index, arr) => {
          if (person.student_id === student.student_id) {
            arr.splice(index, 1);
          }
          return;
        });
      });
    }

    const response = await School.updateOne(
      { _id: schoolId },
      { $set: { students: studentsUpdate } }
    );

    res.status(200).send(response);
  })
);

// PUT Update Staff Data
// PATH api/students/:schoolId/staffs/update
// PRIVATE
router.put(
  "/:schoolId/staffs/update",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const { type, data } = req.body;

    if (schoolId !== req.schoolId) {
      res.status(401);
      throw new Error("Not authorized to access this page");
    }

    const school = await School.findById(schoolId);

    if (!school) {
      res.status(400);
      throw new Error("School not found");
    }

    const staffsUpdate = school.staffs;

    if (type === "save") {
      staffsUpdate.forEach((staff, index, arr) => {
        if (staff.staff_id === data.staff_id) {
          arr[index] = data;
        }
        return;
      });
    }

    if (type === "delete") {
      let index;

      data.forEach((staff) => {
        staffsUpdate.forEach((person, index, arr) => {
          if (person.staff_id === staff.staff_id) {
            arr.splice(index, 1);
          }
        });
      });
    }

    const response = await School.updateOne(
      { _id: schoolId },
      { $set: { staffs: staffsUpdate } }
    );

    res.status(200).send(response);
  })
);

// PUT Update Finance Record
// PATH /api/schools/:schoolId/finance
// PRIVATE
router.put(
  "/:schoolId/finance",
  protect,
  asyncHandler(async (req, res) => {
    const update = req.body;

    try {
      const school = await School.findById(req.schoolId).lean();

      const finance = school.finance;

      const updatedItems = finance.map((fin) => {
        if (fin.statement_id !== update.statement_id) return fin;
        return { ...fin, ...update };
      });

      schoolSchema.add({ finance: Array });
      const response = await School.updateOne(
        { _id: req.schoolId },
        { $set: { finance: [...updatedItems] } },
        { upsert: true }
      );

      return res.status(200).json({ message: "success", data: response });
    } catch (error) {
      res.status(400);

      throw new Error("Unable to update finance records");
    }
  })
);

// PUT Remove Single Finance Record
// PATH api/schools/:schoolId/finance/remove
// PRIVATE
router.put(
  "/:schoolId/finance/remove",
  protect,
  asyncHandler(async (req, res) => {
    const { financeStatementId } = req.body;

    try {
      const school = await School.findById(req.schoolId).lean();
      const finance = school.finance;

      const newFinance = finance.filter(
        (item) => item.statement_id !== financeStatementId
      );

      schoolSchema.add({ finance: Array });
      const response = await School.updateOne(
        { _id: req.schoolId },
        { $set: { finance: [...newFinance] } }
      );

      if (!response) throw new Error("Doc not found in server");

      res.status(200).json({ message: "successful", data: response });
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

// PUT Remove Article Record
// PATH api/schools/:schoolId/articles/remove
// PRIVATE
router.put(
  "/:schoolId/articles/remove",
  protect,
  asyncHandler(async (req, res) => {
    const { postsToDelete } = req.body;

    try {
      const school = await School.findById(req.schoolId).lean();
      const articles = school.articles;

      const newArticlesArray = articles.filter(
        (item) => !postsToDelete.includes(item.articleId)
      );

      schoolSchema.add({ articles: Array });
      const response = await School.updateOne(
        { _id: req.schoolId },
        { $set: { articles: [...newArticlesArray] } }
      );

      if (!response)
        throw new Error(
          `${
            postsToDelete.length > 1 ? "Articles" : "Article"
          } not found in server`
        );

      res.status(200).json({ message: "successful", data: response });
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

// PUT Update School Settings
// PATH /api/schools/:schoolId/settings
// PRIVATE
router.put(
  "/:schoolId/settings",
  protect,
  asyncHandler(async (req, res) => {
    const settingsUpdate = req.body;

    try {
      const { settings } = await School.findById(req.schoolId).lean();

      if (!settings) {
        schoolSchema.add({ settings: Object });
        const response = await School.findByIdAndUpdate(
          { _id: req.schoolId },
          { $set: { settings: { ...settingsUpdate } } }
        );
        return res.status(200).json({
          message: "successful",
          data: JSON.parse(JSON.stringify(response)).settings,
        });
      }

      schoolSchema.add({ settings: Object });
      const response = await School.findByIdAndUpdate(
        { _id: req.schoolId },
        { $set: { settings: { ...settingsUpdate } } }
      );
      return res.status(200).json({
        message: "successful",
        data: JSON.parse(JSON.stringify(response)).settings,
      });
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

// PUT Manage School Slug
// PATH /api/schools/:schoolId/schoolslug
// PRIVATE
router.put(
  "/:schoolId/schoolslug",
  protect,
  asyncHandler(async (req, res) => {
    const { type, schoolSlug } = req.body;

    try {
      const school = await School.findById(req.schoolId).lean();
      const settings = school.settings;

      // Create school slug
      if (type === "create") {
        if (!school.schoolSlug) {
          schoolSchema.add({ schoolSlug: String });
          schoolSchema.add({ settings: Object });

          const response = await School.updateOne(
            { _id: req.schoolId },
            {
              $set: {
                schoolSlug,
                settings: {
                  ...settings,
                  schoolSlug: true,
                },
              },
            }
          );
          return res.status(200).json({
            message: "successful",
            data: response,
          });
        }

        schoolSchema.add({ schoolSlug: String });
        schoolSchema.add({ settings: Object });

        const response = await School.updateOne(
          { _id: req.schoolId },
          {
            $set: {
              schoolSlug,
              settings: {
                ...settings,
                schoolSlug: true,
              },
            },
          }
        );
        return res.status(200).json({
          message: "successful",
          data: response,
        });
      }

      // Delete school slug
      if (type === "delete") {
        const school = await School.findById(req.schoolId).lean();
        const settings = school.settings;

        if (!school.schoolSlug) {
          res.status(400);
          throw new Error("No school slug found");
        }

        schoolSchema.add({ schoolSlug: String });
        schoolSchema.add({ settings: Object });
        const response = await School.updateOne(
          { _id: req.schoolId },
          {
            $unset: { schoolSlug },
            $set: {
              settings: {
                ...settings,
                schoolSlug: false,
              },
            },
          }
        );
        return res.status(200).json({
          message: "successful",
          data: response,
        });
      }
    } catch (error) {
      res.status(400);

      throw new Error(error);
    }
  })
);

// PUT Update Schedule
// PATH /api/schools/:schoolId/schedules
// PRIVATE
router.put(
  "/:schoolId/schedules/:scheduleId",
  protect,
  asyncHandler(async (req, res) => {
    const { schoolId, scheduleId } = req.params;
    const update = req.body;

    try {
      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);

        throw new Error("Oops, school not found!");
      }

      const schedules = school.schedules;
      const newSchedules = schedules.map((schedule, index, arr) => {
        if (parseInt(schedule.ID) === parseInt(scheduleId)) {
          return update;
        }
        return schedule;
      });

      schoolSchema.add({ schedules: Array });

      const resp = await School.updateOne(
        { _id: schoolId },
        { $set: { schedules: [...newSchedules] } }
      );

      if (!resp) {
        res.status(400);

        throw new Error("Could not update schedule, please try again later");
      }
      res.status(200).json({ message: "Success", data: resp });
    } catch (error) {
      res.status(400);
      throw new Error(error);
    }
  })
);

//------- POST REQUESTS -------//

// POST Create New School
// PATH /api/schools/
// PUBLIC
router.post(
  "/",
  asyncHandler(async (req, res) => {
    const {
      schoolName,
      institutionLevel,
      address,
      email,
      phoneNumber,
      country,
      currency,
      password,
      confirmPassword,
    } = req.body;

    // check if all required data is present

    if (
      !schoolName ||
      !institutionLevel ||
      !address ||
      !email ||
      !phoneNumber ||
      !country ||
      !password ||
      !confirmPassword
    ) {
      res.status(400);

      throw new Error("Please fill in all fields");
    }

    // check if email exists in database
    checkEmail(email, res);

    // check all inputs
    checkInputs(req.body);

    // create school
    try {
      const school = await School.create({
        name: schoolName,
        email,
        institutionLevel,
        password,
        country,
        address,
        phoneNumber,
        currency,
      });

      if (!school) {
        res.status(400);
        throw new Error("User not created");
      }

      res.status(201).json({
        id: school._id,
        token: createToken(school._id),
      });
    } catch (error) {
      res.status(400);
      throw new Error(`Error creating user: ${error}`);
    }
  })
);

// POST Sign In To School Account
// PATH /api/schools/login
// PUBLIC
router.post(
  "/login",
  asyncHandler(async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
      res.status(400);

      throw new Error("Please fill input fields properly.");
    }

    try {
      const school = await School.findOne({ email });
      if (school) {
        const { password: hashedPassword } = school;
        const valid = await bcrypt.compare(password, hashedPassword);
        if (valid) {
          res.status(200).json({
            id: school.id,
            token: createToken(school.id),
          });
        } else {
          res.status(400);
          throw new Error("Email or password is incorrect");
        }
      } else {
        res.status(404);
        throw new Error("School not registered");
      }
    } catch (error) {
      res.status(404);
      throw new Error(error);
    }
  })
);

// POST Register New Student
// PATH api/schools/:schoolId/students
// PRIVATE
router.post(
  "/:schoolId/students",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const data = req.body;

    if (schoolId !== req.schoolId) {
      res.status(401);
      throw new Error("Not authorized to access this page");
    }

    const school = await School.findById(schoolId);

    if (!school) {
      res.status(400);
      throw new Error("School not found");
    }
    const response = await School.updateOne(
      { _id: schoolId },
      { $set: { students: data } }
    );

    res.status(200).send(response);
  })
);

// POST Register New Staff
// PATH api/schools/:schoolId/staffs
// PRIVATE
router.post(
  "/:schoolId/staffs",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const data = req.body;

    if (schoolId !== req.schoolId) {
      res.status(401);
      throw new Error("Not authorized to access this page");
    }

    const school = await School.findById(schoolId);

    if (!school) {
      res.status(400);
      throw new Error("School not found");
    }
    const response = await School.updateOne(
      { _id: schoolId },
      { $set: { staffs: data } }
    );

    res.status(200).send(response);
  })
);

// POST Record New Finance
// PATH api/schools/:schoolId/finance
// PRIVATE
router.post(
  "/:schoolId/finance",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const data = req.body;

    try {
      if (schoolId !== req.schoolId) {
        res.status(401);
        throw new Error("Not authorized to access this page");
      }

      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);
        throw new Error("School not found");
      }

      // If finance field does not exists
      if (school.finance === undefined) {
        try {
          schoolSchema.add({ finance: Array });
          const response = await School.updateOne(
            { _id: schoolId },
            { $set: { finance: [data] } },
            { new: true, upsert: true }
          );
          return res.status(200).json({ message: "success", data: response });
        } catch (error) {
          res.status(400);
          throw new Error("Unable to create finance field.");
        }
      }

      // If finance field already exists
      const financeUpdate = [data, ...school.finance];
      schoolSchema.add({ finance: Array });
      const response = await School.updateOne(
        { _id: schoolId },
        { $set: { finance: [...financeUpdate] } },
        { new: true, upsert: true }
      );

      res.status(200).json({
        message: "Successfully updated finance field",
        data: response,
      });
    } catch (error) {
      res.status(400);
      throw new Error("Unable to update finance field.");
    }
  })
);

// POST Create School Slug
// PATH api/schools/slugs
// PRIVATE
router.post(
  "/slugs",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const data = req.body;

    try {
      if (schoolId !== req.schoolId) {
        res.status(401);
        throw new Error("Not authorized to access this page");
      }

      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);
        throw new Error("School not found");
      }

      // If finance field does not exists
      if (school.finance === undefined) {
        try {
          schoolSchema.add({ finance: Array });
          const response = await School.updateOne(
            { _id: schoolId },
            { $set: { finance: [data] } },
            { new: true, upsert: true }
          );
          return res.status(200).json({ message: "success", data: response });
        } catch (error) {
          res.status(400);
          throw new Error("Unable to create finance field.");
        }
      }

      // If finance field already exists
      const financeUpdate = [data, ...school.finance];
      schoolSchema.add({ finance: Array });
      const response = await School.updateOne(
        { _id: schoolId },
        { $set: { finance: [...financeUpdate] } },
        { new: true, upsert: true }
      );

      res.status(200).json({
        message: "Successfully updated finance field",
        data: response,
      });
    } catch (error) {
      res.status(400);
      throw new Error("Unable to update finance field.");
    }
  })
);

// POST Save Schedule
// PATH api/schools/:schoolId/schedules
// PRIVATE
router.post(
  "/:schoolId/schedules",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const data = req.body;

    try {
      if (schoolId !== req.schoolId) {
        res.status(401);
        throw new Error("Not authorized to access this page");
      }

      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);
        throw new Error("School not found");
      }

      // If schedules field does not exists
      if (school.schedules === undefined) {
        try {
          schoolSchema.add({ schedules: Array });
          const response = await School.updateOne(
            { _id: schoolId },
            { $set: { schedules: [data] } },
            { new: true, upsert: true }
          );
          return res.status(200).json({ message: "success", data: response });
        } catch (error) {
          res.status(400);
          throw new Error("Unable to create schedules field.");
        }
      }

      // If schedules field already exists
      const schedulesUpdate = [data, ...school.schedules];
      schoolSchema.add({ schedules: Array });
      const response = await School.updateOne(
        { _id: schoolId },
        { $set: { schedules: [...schedulesUpdate] } },
        { new: true, upsert: true }
      );

      res.status(200).json({
        message: "Successfully updated schedules field",
        data: response,
      });
    } catch (error) {
      res.status(400);
      throw new Error("Unable to update schedules field.");
    }
  })
);
// POST School Article
// PATH api/schools/:schoolId/articles
// PRIVATE
router.post(
  "/:schoolId/articles/:articleId",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const articleId = req.params.articleId;
    const { articleURL, articleDetails } = req.body;

    try {
      if (schoolId !== req.schoolId) {
        res.status(401);
        throw new Error("Not authorized to access this page");
      }

      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);
        throw new Error("School not found");
      }

      // If articles field does not exists
      if (school.articles === undefined) {
        try {
          schoolSchema.add({ articles: Array });
          const response = await School.updateOne(
            { _id: schoolId },
            { $set: { articles: [{ articleId, articleURL, articleDetails }] } },
            { new: true, upsert: true }
          );
          const firebaseReq = await axios({
            url: articleURL,
            method: "GET",
          });
          return res.status(200).json({
            message: "success",
            data: response,
            article: firebaseReq.data,
          });
        } catch (error) {
          res.status(400);
          throw new Error("Unable to create articles field.");
        }
      }

      // If schedules field already exists
      let articlesUpdate, articleIndex;

      const articleExists = school.articles.filter(
        (art, index) => art.articleId === articleId
      );

      school.articles.forEach((art, index) => {
        if (art.articleId === articleId) articleIndex = index;
      });

      if (articleExists.length > 0) {
        articlesUpdate = [
          ...school.articles.slice(0, articleIndex),
          { articleId, articleURL, articleDetails },
          ...school.articles.slice(articleIndex + 1),
        ];
      } else {
        articlesUpdate = [
          { articleId, articleURL, articleDetails },
          ...school.articles,
        ];
      }

      schoolSchema.add({ articles: Array });
      const response = await School.updateOne(
        { _id: schoolId },
        { $set: { articles: [...articlesUpdate] } },
        { new: true, upsert: true }
      );

      res.status(200).json({
        message: "Successfully updated articles field",
        data: response,
      });
    } catch (error) {
      console.log(error);
      res.status(400);
      throw new Error("Unable to update articles field.");
    }
  })
);

// POST Create New Kanban Item
// PATH api/schools/:schoolId/kanban
// PRIVATE
router.post(
  "/:schoolId/kanban",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const data = req.body;

    try {
      if (schoolId !== req.schoolId) {
        res.status(401);
        throw new Error("Not authorized to access this page");
      }

      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);
        throw new Error("School not found");
      }

      // If kanban field does not exists
      if (school.kanban === undefined) {
        try {
          schoolSchema.add({ kanban: Array });
          schoolSchema.add({ kanbanListOrder: Array });

          const listOrder = [
            "Not Started",
            "Need Assistance",
            "In Progress",
            "Deferred",
            "Completed",
          ];

          const response = await School.updateOne(
            { _id: schoolId },
            { $set: { kanban: [data], kanbanListOrder: [...listOrder] } },
            { new: true, upsert: true }
          );
          return res.status(200).json({ message: "success", data: response });
        } catch (error) {
          res.status(400);
          throw new Error("Unable to create kanban field.");
        }
      }

      // If kanban field already exists
      const kanbanUpdate = [data, ...school.kanban];
      schoolSchema.add({ kanban: Array });
      const response = await School.updateOne(
        { _id: schoolId },
        { $set: { kanban: [...kanbanUpdate] } },
        { new: true, upsert: true }
      );

      res.status(200).json({
        message: "Successfully updated kanban field",
        data: response,
      });
    } catch (error) {
      res.status(400);
      throw new Error("Unable to update kanban field.");
    }
  })
);

// POST Update Kanban Data
// PATH api/schools/:schoolId/kanban/update
// PRIVATE
router.post(
  "/:schoolId/kanban/update",
  protect,
  asyncHandler(async (req, res) => {
    const schoolId = req.params.schoolId;
    const { tasks, listOrder } = req.body;

    try {
      if (schoolId !== req.schoolId) {
        res.status(401);
        throw new Error("Not authorized to access this page");
      }

      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);
        throw new Error("School not found");
      }

      // If kanban list order does not exists
      if (school.kanbanListOrder === undefined) {
        try {
          schoolSchema.add({ kanbanListOrder: Array });
          const response = await School.updateOne(
            { _id: schoolId },
            { $set: { kanbanListOrder: [...listOrder] } },
            { new: true, upsert: true }
          );
          return res.status(200).json({ message: "success", data: response });
        } catch (error) {
          res.status(400);
          throw new Error("Unable to create kanban list order.");
        }
      }

      console.log(tasks, listOrder);

      // If kanban list order already exists and update kanban board tasks
      schoolSchema.add({ kanban: Array });
      schoolSchema.add({ kanbanListOrder: Array });

      const response = await School.updateOne(
        { _id: schoolId },
        { $set: { kanbanListOrder: [...listOrder], kanban: [...tasks] } },
        { new: true, upsert: true }
      );

      res.status(200).json({
        message: "Successfully updated kanban list order",
        data: response,
      });
    } catch (error) {
      res.status(400);
      throw new Error("Unable to update kanban list order field.");
    }
  })
);

//------- DELETE REQUESTS -------//

// DELETE School Schedule
// PATH api/schools/:schoolId/schedules
// PRIVATE
router.delete(
  "/:schoolId/schedules/:scheduleId",
  protect,
  asyncHandler(async (req, res) => {
    const { schoolId, scheduleId } = req.params;

    try {
      const school = await School.findById(schoolId).lean();

      if (!school) {
        res.status(400);

        throw new Error("Oops, school not found!");
      }

      const schedules = school.schedules;
      const newSchedules = schedules.filter(
        (schedule) => parseInt(schedule.ID) !== parseInt(scheduleId)
      );

      schoolSchema.add({ schedules: Array });

      const resp = await School.updateOne(
        { _id: schoolId },
        { $set: { schedules: [...newSchedules] } }
      );

      if (!resp) {
        res.status(400);

        throw new Error("Could not remove schedule, please try again later");
      }
      res.status(200).json({ message: "Success", data: resp });
    } catch (error) {
      res.status(400);
      throw new Error(error);
    }
  })
);

module.exports = router;
